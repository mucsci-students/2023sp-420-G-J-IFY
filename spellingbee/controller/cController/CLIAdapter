################################################################################
# CAdapter.py
# AUTHOR: Yah'hymbey Baruti Ali-BEy
# DATE OF CREATION: - 3/28/2023
# 
# DESCRIPTION:
#   Multi-line descripiton pending
#
# FUNCTIONS:
#   
################################################################################

import cmd
import sys
import os
import puzzle

current = os.path.dirname(os.path.realpath(__file__))

parent = os.path.dirname(current)

sys.path.append(parent)

from cview import CLI
from model import MakePuzzle, StateStorage, hint, output
from os import path
  

class CLI_A:
    def __init(self, puzzle: puzzle.Puzzle, outty: object):
        self.puzzle = puzzle
        self.outty = outty

    ################################################################################
    # parse(userinput : str, game : object, outty : object) -> object:
    #
    # DESCRIPTION:
    #   Directs game functionality based on string input, game object
    # 
    # PARAMETERS:
    #   usrinput : str
    #     - string provided by user containing either a guess, a command, or bad
    #       input.
    #   game : object
    #     - puzzle object storing current game state
    #   outty : object
    #     - output object storing output strings
    #
    # RETURN:
    #   object
    #     - updated puzzle object
    ################################################################################
    def parse(self, usrinput : str) -> object:
        match usrinput:
            case '!new':
                return self.newPuzzle()
            case '!puzzle':
                self.printPuzzle()
                return self.puzzle
            case '!found-words':
                self.printWords()
                return self.puzzle
            case '!status':
                self.showStatus()
                return self.puzzle
            case '!shuffle':
                self.puzzle.shuffleChars()
                self.outty.setField('Shuffling letters...')
                return self.puzzle
            case '!save':
                self.saveGame()
                return self.puzzle
            case '!savePuzzle':
                self.savePuzzle()
                return self.puzzle
            case '!load':
                return self.loadGame()
            case '!save-list':
                self.outty.setField('Implementation Pending...')
            case '!help':
                self.help()
                return self.puzzle
            case '!exit':
                self.exit()
                return self.puzzle
            case _:
                if usrinput.startswith('!'):
                    self.utty.setField('Command not recognized. Type \"!help\" for a list of '
                        'valid commands...')
                    return self.puzzle

                elif not usrinput.isalpha():
                    self.outty.setField('Input not accepted:\n'
                        '\t~Guesses should only contain alphabetical characters.')
                    return self.puzzle
                    
                else:
                    guess = cmd.Guess(self.puzzle, usrinput, self.outty)
                    guess.execute()
                    return self.puzzle


    ################################################################################
    # newPuzzle() -> None:
    #
    # DESCRIPTION:
    #   prompts for input and directs functionality to create a new puzzle object.
    #
    #  PARAMETERS:
    #   outty : object
    #     - output object storing output strings
    #
    # RETURN:
    #   object
    #     - new puzzle object
    ################################################################################
    def newPuzzle(self) -> object:
        print('Please enter a base word with exactly 7 unique characters. \n' +
        'For auto-generated base word, press enter.')
        word = input('> ')
        keyLetter = ''
        if word != '':
            keyLetter = input("Enter a letter from your word "
                        "to use as the key letter\n> ")
        out = cmd.NewGame(word.lower(), keyLetter.lower(), self.outty)
        out = out.execute()
        if self.outty.getField().startswith("ERROR"):
            print(self.outty.getField())
            self.outty.setField('')
        else:
            out.shuffleChars()
            return(out)


    ################################################################################
    # printPuzzle(game : object) -> None:
    #
    # DESCRIPTION:
    #   prints puzzle data in a neatly formatted box
    #
    # PRAMETERS:
    #   game : object
    #     - puzzle object storing current game state
    ################################################################################
    def printPuzzle(self) -> None:
        CLI.drawTextBox([CLI.drawPuzzle(self.puzzle.getShuffleLetters().upper())], 
                        40, '^')


    ################################################################################
    # printWords(game : object) ->
    #
    # DESCRIPTION:
    #   prints list of discovered words in a neatly formatted text box
    #
    # PARAMETERS:
    #   game : object
    #     - puzzle object storing current game state
    ################################################################################
    def printWords(self) -> None:
        CLI.drawTextBox(
            ['Discovered Words: \ {wrds}'.format(wrds = self.puzzle.getFoundWords())], 
            40, '^')


    ################################################################################
    # showStatus(game : object) -> None
    #
    # DESCRIPTION:
    #   prints the current user rank, score, a progress bar and percent progress
    #   in a neatly formatted text box.
    #
    # PARAMETERS:
    #   game : object
    #     - puzzle object storing the current game state.
    ################################################################################
    def showStatus(self) -> None:
        score = self.puzzle.getScore()
        max = self.puzzle.getMaxScore()
        prog = score/max
        bar = self.puzzle.getRank() + ' ' + CLI.drawProgressBar(20, prog)
        stats = 'Score: {} \ Progress: {}%'.format(score, int(prog*100))
        CLI.drawTextBox(['Level: \ ' + bar + ' \ ' + stats], 40, '^')


    ################################################################################
    # saveGame(Game : object) -> None:
    #
    # DESCRIPTION:
    #   creates a new save entry for the overall status of the game.
    #
    # PARAMETERS:
    #   game : object
    #     - puzzle object storing the current game state
    #   outty : object
    #     - output object storing output strings
    ################################################################################
    def saveGame(self) -> None:
        self.handleSave(0)


    ################################################################################
    # savePuzzle(game : object) -> None:
    #
    # DESCRIPTION:
    #   creates a new save entry for JUST the puzzle data of the game.
    #
    # PARAMETERS:
    #   game : object
    #     - puzzle object storing the current game state
    #   outty : object
    #     - output object storing output strings
    ################################################################################
    def savePuzzle(self) -> None:
        self.handleSave( 1)


    ################################################################################
    # loadGame(game : object) -> None:
    #
    # DESCRIPTION:
    #   load an existing save entry into memory
    #
    # PARAMETERS:
    #   game : object
    #     - puzzle object storing the current game state
    #   outty : object
    #     - output object storing output strings
    ################################################################################
    def loadGame(self) -> None:
        fileName = input('Please enter the name of the game you are looking for.'
                        '\n> ')
        os.chdir('./saves')
        currentPath = os.getcwd()

        newGame =  cmd.LoadGame(currentPath)
        newGame = newGame.execute()
        if newGame != None:
            self.puzzle = newGame
        return self.puzzle


    ################################################################################
    # help() -> None
    #
    # DESCRIPTION:
    #   provides a brief description of game rules and generally how to play as well
    #   as a list of all available commands.
    ################################################################################
    def help(self) -> None:
        descHead = ('How to play: \ ')
        descBody = ("Simply type a word after the '> ' prompt and press enter "
                    "to submit a guess. \ \ "
                    "To enter a command, simply type '!' followed by the command "
                    "you wish to use.")

        commHead = ('Available Commands: \ ')
        commBody = ('!new: \ '
                    'Generates a new puzzle from a base word with exactly 7 '
                    'unique characters, or an auto-generated base word. \ '
                    '!puzzle: \ '
                    'Prints the current puzzle to the screen \ '
                    '!found-words: \ '
                    'Displays the list of all discovered words \ '
                    '!status: \ '
                    'Prints your achieved level for the active game \ '
                    '!shuffle: \ '
                    'Shuffle the order of the active puzzle for a fresh view \ '
                    '!save: \ '
                    'Create a new save for the current game \ '
                    '!savePuzzle: \ '
                    'Create a new save for a blank version of the current game '
                    '(not including any progress from current session) \ '
                    '!load: \ '
                    'Load a previously saved game \ '
                    '!help: \ '
                    'Show the list of all available commands with a brief '
                    "description. (You're here now!) \ "
                    '!exit: \ '
                    'Exit the game ')
        
        CLI.drawTextBox([descHead, descBody], 40, '<')
        CLI.drawTextBox([commHead, commBody], 40, '<')


    ################################################################################
    # exit() -> None:
    #
    # DESCRIPTION:
    #   prompts user for confirmation, then quits the game.
    ################################################################################
    def exit(self) -> None:
        print('Are you sure? all unsaved progress will be lost. [Y/N]')
        usrinput = input('> ').upper()
        match usrinput:
            case 'Y':
                self.outty.setField("Thank you for playing!")
        
                quit()
            case 'N':
                return
            case _:
                self.outty.setField('Input Invalid')
                self.parse('!exit') # recursively calls until valid input provided.


    ################################################################################
    # handleSave(game : object, num : int, outty : object) -> None:
    #
    # DESCRIPTION:
    #   saves the games state and handles input from the user to determin if they
    #   want to overwrite a file or not
    # 
    # PARAMETERS:
    #   game : object
    #     - puzzle object storing current game state
    #   num : int
    #     - an integer value to determin if we are saving all the game progress
    #       or just the pzzle. 0 for saveCurrent() and 1 for savePuzzle().
    #   outty : object
    #     - output object storing output strings
    ################################################################################
    def handleSave(self, num : int) -> None:
        saveStatus = False
        fileName = input('Please enter the name of the file you would like to save '
                        'for example "Game1"\n> ')
        os.chdir('./saves')
        currentPath = os.getcwd()
        fFileName = fileName + 'json'
        
        if(path.isfile(fFileName)):
            yesOrNo = input('Would you like to overwrite the file ' + fileName + '?'
                            '\n Enter Y for yes or N for no\n> ')
            if(yesOrNo == 'Y'):
                if(num == 0):
                    save = cmd.SaveGame(self.puzzle, fFileName, currentPath + fFileName, 0)
                    save.execute
                    saveStatus = True
                elif(num == 1):
                    save = cmd.SaveGame(self.puzzle, fFileName, currentPath + fFileName, 1)
                    save.execute
                    saveStatus = True
        else: 
            if(num == 0):
                save = cmd.SaveGame(self.puzzle, fFileName, currentPath + fFileName, 0)
                save.execute
                saveStatus = True
            elif(num == 1):
                save = cmd.SaveGame(self.puzzle, fFileName, currentPath + fFileName, 1)
                save.execute
                saveStatus = True
        
        if saveStatus:
            print('Save Complete!')
        else:
            print('Game could not be saved.')
            
        os.chdir('..')

    ################################################################################
    # finalGame(finishedPuzzle : object, outty : object) -> None
    #
    # DESCRIPTION:
    #   Notifies the user that they have found all the words for the currently
    #   active game.
    #
    # PARAMETERS:
    #   finishedPuzzle : object
    #     - puzzle object for the currently active (and finished) game.
    #   outty : object
    #     - output object storing output strings
    ################################################################################
    def finalGame(self, finishedPuzzle : object) -> None:
        self.showStatus(finishedPuzzle)
        self.outty.setField("Congratulations!!!! You have found all of the words for this puzzle!")
        
    def commandsList(self) -> list:
        commands = [
        '!new',
        '!puzzle',
        '!found-words',
        '!status',
        '!shuffle',
        '!save',
        '!savePuzzle',
        '!load',
        '!help',
        '!exit',
        '!hint'
        ]
        return commands
